using System.Collections;
using System.Collections.Generic;
using SunkenRuins;
using Unity.Properties;
using UnityEngine;

namespace SunkenRuins
{
    public class MapArray : MonoBehaviour
    {
        int[,] baseMap; int[,] realMap;
        int startX; int startY;
        int endX; int endY;
        int tileTraceX = 10; int tileTraceY = 10;

        // Tile Boundaries
        int startTileX = 10; int startTileY = 10;
        // int endTileX; int endTileY;
        int mapXLength = 10; int mapYLength = 12;

        [SerializeField] private int mapHeight = 8;
        [SerializeField] private int mapWidth = 8;

        // Tiles
        [SerializeField] GameObject dwellingTile;

        // Enemies
        [SerializeField] GameObject ElectricStingRay;
        [SerializeField] GameObject HypnoCuttleFish;
        [SerializeField] GameObject AngryShell;
        [SerializeField] GameObject ThrowingCrab;   

        // Items
        [SerializeField] GameObject HealthPotion; 
        [SerializeField] GameObject BubbleShield; 
        [SerializeField] GameObject PowerBattery; 

        enum RoomType
        {
            RandomRoom = 0,
            UpRoom = 1,
            RightRoom = 2,
            DownRoom = 3,
            LeftRoom = 4,
            UpRightRoom = 5,
            DownRightRoom = 6,
            DownLeftRoom = 7,
            UpLeftRoom = 8,
            UpDownRoom = 9,
            LeftRightRoom = 10,
            UpDownRightRoom = 11,
            UpDownLeftRoom = 12,
            DownLeftRightRoom = 13,
            UpLeftRightRoom = 14,
            AllSidesRoom = 15,
            StartRoom = 16,
            EndRoom = 17,
        }

        enum TileType
        {
            Blank = 0,
            Block = 1,
            ElectricStingRay = 10,
            HypnoCuttleFish = 11,
            AngryShell = 12,
            ThrowingCrab = 13,
            HealthPotion = 14,
            BubbleShield = 15,
            PowerBattery = 16,

            StartPosition = 100,
        }

        // Size of One Map: 10 * 12
        int[,,] StartRoom = new int[1, 12, 10]
        {
            {
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 100, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 1, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            },
        };

        int[,,] EndRoom = new int[1, 12, 10]
        {
            {
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 1, 1, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            },
        };

        int[,,] RandomRoom = new int[44, 12, 10]
        {
            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 1, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 1, 1, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 1, 1, 1, 0, 1 },
                { 1, 1, 1, 0, 0, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 0, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 1, 1, 0, 1, 1 },
                { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 1, 1, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 1, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 1, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 1, 1 },
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 1, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 1, 1, 1, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 0, 0, 1, 1},
                {1, 1, 1, 1, 1, 0, 0, 0, 0, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 1, 1, 1, 1},
            },

            {
                {1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 1, 1, 1, 1, 1, 1},
                {1, 0, 0, 0, 0, 1, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
            },
        
            {
                {1, 1, 1, 1, 1, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 1, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 1, 0, 0, 1, 0, 0, 1},
                {1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
                {1, 0, 0, 0, 0, 0, 1, 1, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 1, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
            },
        
            {
                {1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 1, 0, 0, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
            },

            // 아래 위 뚫리는 방
            {
                {1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
            },
        
            {
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 1, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 1, 0, 0, 1, 0, 0, 1},
                {1, 1, 1, 1, 0, 0, 1, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 1, 0, 0, 1},
                {1, 0, 0, 0, 0, 0, 1, 1, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 1},
            },
        
            {
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 1, 1, 1, 1},
            },

            // 아래 위 왼쪽 뚫린 방
            {
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                { 0, 0, 1, 1, 1, 1, 1, 1, 1, 1},
                { 0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
            },

            {
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 1, 1, 1, 1, 0, 0, 0, 0, 1, 1},
                { 1, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
            },

            {
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 1, 0, 0, 0, 0, 0, 1, 1},
                { 0, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
            },

            // 왼쪽만 뚫린 방
            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                { 1, 1, 0, 0, 0, 1, 1, 1, 1, 1},
                { 1, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1},
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
            },
            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                { 1, 1, 1, 1, 1, 1, 0, 1, 1, 1},
                { 1, 0, 0, 1, 1, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
                { 1, 0, 0, 1, 1, 1, 0, 0, 0, 1},
                { 1, 0, 1, 1, 1, 1, 1, 0, 1, 1},
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
            },
            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                { 1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 0, 1, 0, 0, 0, 1},
                { 0, 0, 0, 0, 1, 1, 0, 0, 0, 1},
                { 0, 0, 0, 0, 1, 0, 0, 0, 1, 1},
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1},
                { 0, 0, 0, 1, 1, 0, 0, 0, 1, 1},
                { 1, 0, 1, 1, 1, 1, 0, 0, 1, 1},
                { 1, 1, 1, 1, 1, 1, 1 ,1 ,1, 1},
            },

            // 위, 오른쪽, 아래 뚫린 방
            {
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 1, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
            },

            {
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 1, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
            },

            {
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 1, 1, 1, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 1, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
            },

                    {
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 1 },
            },

            {
                { 1, 1, 0, 0, 0, 0, 1, 1, 1, 1 },
                { 1, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
                { 1, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 1, 0, 1, 1, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 1, 1, 1 },
            },

            {
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 1, 1, 1, 1, 0, 1, 1 },
                { 0, 0, 0, 0, 1, 1, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 0, 1, 1, 1, 0, 0, 1 },
                { 1, 0, 0, 0, 1, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0 },
                { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 0, 1, 1, 0, 1 },
                { 1, 0, 1, 1, 0, 0, 1, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 },
                { 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            },

            {
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 1, 1 },
                { 0, 1, 1, 0, 0, 0, 0, 1, 1, 1 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 1, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 0, 0, 0, 0, 0, 1, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 1, 1, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 0, 0, 0, 0, 0, 1, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 1, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 1, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 1, 1, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 1, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 1},
                {0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 0, 0, 1, 1, 1, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 1, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 1, 1, 1, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 0, 1, 1, 0, 0, 0, 0},
                {1, 0, 1, 1, 1, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 1, 1, 1, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 1, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 1},
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 1, 1, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 0, 1, 1, 1, 1, 0, 1, 1 },
                { 1, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 0, 0, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },
        };
        
        int[,,] LeftRightRoom = new int[3, 12, 10]{
            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 0, 0, 0, 1, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 1, 1, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 1, 1, 1, 1, 1, 0 },
                { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 0, 1, 1, 1, 1, 0, 1, 1 },
                { 1, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 0, 0, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 1, 1, 1, 1, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 0 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },
        };

        int[,,] UpLeftRightRoom = new int[3, 12, 10]{
            {
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },
        };

        int[,,] DownLeftRightRoom = new int[3, 12, 10]{
            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 1, 1, 1, 1, 0, 1, 1 },
                { 0, 0, 0, 0, 1, 1, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 0, 1, 1, 1, 0, 0, 1 },
                { 1, 0, 0, 0, 1, 1, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 1, 1, 0, 0 },
                { 0, 0, 0, 1, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 },
            },

            {
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 0, 1, 1, 0, 1 },
                { 1, 0, 1, 1, 0, 0, 1, 0, 0, 0 },
                { 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 },
                { 0, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 1, 1, 1, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
            },
        };

        int[,,] UpLeftRoom = new int[3, 12, 10]{
            {
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 1, 1 },
                { 0, 1, 1, 0, 0, 0, 0, 1, 1, 1 },
                { 0, 0, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 1, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 1, 1, 1, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 1, 0, 0, 0, 0, 1 },
                { 1, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 1, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 0, 0, 0, 0, 0, 1, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            }
        };

        int[,,] UpRightRoom = new int[3, 12, 10]{
            {
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 1, 0, 0, 0, 1, 1, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 0, 0, 0, 0, 0, 1, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 1, 1, 1, 0, 0, 0, 0, 1 },
                { 1, 1, 1, 1, 1, 1, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },

            {
                { 1, 0, 0, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 0, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 1, 1, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 1, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 1, 1, 0, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 1, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 1, 1, 1, 1 },
                { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1 },
            },
        };

        int[,,] DownLeftRoom = new int[3, 12, 10]{
            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 1, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 1},
                {0, 0, 0, 0, 0, 1, 1, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 1, 0, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 0, 0, 1, 1, 1, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 1, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 1, 1, 1},
                {0, 0, 0, 0, 0, 0, 0, 0, 1, 1},
                {0, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 1, 0, 0, 0, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 1, 1},
            }
        };

        int[,,] DownRightRoom = new int[3, 12, 10]{
            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 0, 0, 1, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
                {1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 1, 1, 1, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 0, 0, 1, 1, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 0, 0, 0, 0, 0, 0, 1},
                {1, 0, 0, 0, 1, 1, 0, 0, 0, 0},
                {1, 0, 1, 1, 1, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 0},
                {1, 1, 0, 0, 0, 0, 0, 1, 1, 1},
                {1, 0, 0, 0, 0, 0, 1, 1, 1, 1},
            },

            {
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
                {1, 1, 1, 1, 1, 0, 0, 0, 1, 1},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 1},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 1, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 0, 0, 0, 0, 0, 0, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 1, 0, 0},
                {1, 1, 1, 0, 0, 0, 0, 1, 1, 1},
                {1, 1, 0, 0, 0, 0, 0, 0, 1, 1},
            }
        };

        int[,,] AllSidesRoom = new int[2, 12, 10]{
            {
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 1, 1, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 0, 0, 0, 0, 0, 0, 0, 0, 1 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 0, 0, 1 },
            },

            {
                { 1, 1, 0, 0, 0, 0, 1, 1, 1, 1 },
                { 1, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
                { 1, 0, 0, 0, 0, 1, 1, 1, 1, 1 },
                { 0, 0, 0, 0, 0, 1, 0, 1, 1, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 },
                { 1, 1, 0, 0, 0, 0, 0, 0, 1, 0 },
                { 1, 1, 1, 0, 0, 0, 0, 0, 1, 1 },
                { 1, 1, 1, 1, 0, 0, 0, 1, 1, 1 },
            },
        };

        private void Start()
        {
            // endTileX = startTileX + 4 * mapXLength;
            // endTileY = startTileY - 4 * mapYLength;

            MakeRealMap();
        }

        private void MakeRealMap()
        {
            MakeBaseMap();

            realMap = new int[mapHeight * mapYLength, mapWidth * mapXLength]; // 맵 크기 바꿀 때마다 숫자 바꿔야 함
            int realStartX = 0; int realStartY = 0;
            int realTraceX; int realTraceY;
            int roomNumber; int flipProb;
            for (int y = 0; y < baseMap.GetLength(0); ++y)
            {
                for (int x = 0; x < baseMap.GetLength(1); ++x)
                {
                    realTraceX = realStartX;
                    realTraceY = realStartY;

                    switch ((RoomType)baseMap[y, x])
                    {
                        case RoomType.RandomRoom:
                            roomNumber = Random.Range(0, RandomRoom.GetLength(0));
                            flipProb = Random.Range(0, 3);

                            if (flipProb == 0)
                            {
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = RandomRoom[roomNumber, roomY, roomX];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 1)
                            {
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = RandomRoom[roomNumber, roomY, mapXLength - roomX - 1];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 2)
                            {
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    for (int roomY = 0; roomY < mapYLength; ++roomY)
                                    {
                                        realMap[realTraceY++, realTraceX] = RandomRoom[roomNumber, mapYLength - roomY - 1, roomX];
                                    }
                                    realTraceY = realStartY;
                                    ++realTraceX;
                                }
                            }
                            else Debug.LogError("FlipProb DNE Error [MapArray.cs]");

                            realStartX += mapXLength;
                            break;

                        case RoomType.UpRoom:
                        break;

                        case RoomType.RightRoom:
                        break;

                        case RoomType.DownRoom:
                        break;

                        case RoomType.LeftRoom:
                        break;

                        case RoomType.UpRightRoom:
                            flipProb = Random.Range(0, 3);

                            if (flipProb == 0)
                            {
                                roomNumber = Random.Range(0, UpRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = UpRightRoom[roomNumber, roomY, roomX];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 1)
                            {
                                roomNumber = Random.Range(0, UpLeftRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = UpLeftRoom[roomNumber, roomY, mapXLength - roomX - 1];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 2)
                            {
                                roomNumber = Random.Range(0, DownRightRoom.GetLength(0));
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    for (int roomY = 0; roomY < mapYLength; ++roomY)
                                    {
                                        realMap[realTraceY++, realTraceX] = DownRightRoom[roomNumber, mapYLength - roomY - 1, roomX];
                                    }
                                    realTraceY = realStartY;
                                    ++realTraceX;
                                }
                            }
                            else Debug.LogError("FlipProb DNE Error [MapArray.cs]");

                            realStartX += mapXLength;
                            break;

                        case RoomType.DownRightRoom:
                            flipProb = Random.Range(0, 3);

                            if (flipProb == 0)
                            {
                                roomNumber = Random.Range(0, DownRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = DownRightRoom[roomNumber, roomY, roomX];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 1)
                            {
                                roomNumber = Random.Range(0, DownLeftRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = DownLeftRoom[roomNumber, roomY, mapXLength - roomX - 1];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 2)
                            {
                                roomNumber = Random.Range(0, UpRightRoom.GetLength(0));
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    for (int roomY = 0; roomY < mapYLength; ++roomY)
                                    {
                                        realMap[realTraceY++, realTraceX] = UpRightRoom[roomNumber, mapYLength - roomY - 1, roomX];
                                    }
                                    realTraceY = realStartY;
                                    ++realTraceX;
                                }
                            }
                            else Debug.LogError("FlipProb DNE Error [MapArray.cs]");

                            realStartX += mapXLength;
                            break;

                        case RoomType.DownLeftRoom:
                            flipProb = Random.Range(0, 3);

                            if (flipProb == 0)
                            {
                                roomNumber = Random.Range(0, DownLeftRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = DownLeftRoom[roomNumber, roomY, roomX];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 1)
                            {
                                roomNumber = Random.Range(0, DownRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = DownRightRoom[roomNumber, roomY, mapXLength - roomX - 1];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 2)
                            {
                                roomNumber = Random.Range(0, UpLeftRoom.GetLength(0));
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    for (int roomY = 0; roomY < mapYLength; ++roomY)
                                    {
                                        realMap[realTraceY++, realTraceX] = UpLeftRoom[roomNumber, mapYLength - roomY - 1, roomX];
                                    }
                                    realTraceY = realStartY;
                                    ++realTraceX;
                                }
                            }
                            else Debug.LogError("FlipProb DNE Error [MapArray.cs]");

                            realStartX += mapXLength;
                            break;

                        case RoomType.UpLeftRoom:
                            flipProb = Random.Range(0, 3);

                            if (flipProb == 0)
                            {
                                roomNumber = Random.Range(0, UpLeftRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = UpLeftRoom[roomNumber, roomY, roomX];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 1)
                            {
                                roomNumber = Random.Range(0, UpRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = UpRightRoom[roomNumber, roomY, mapXLength - roomX - 1];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 2)
                            {
                                roomNumber = Random.Range(0, DownLeftRoom.GetLength(0));
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    for (int roomY = 0; roomY < mapYLength; ++roomY)
                                    {
                                        realMap[realTraceY++, realTraceX] = DownLeftRoom[roomNumber, mapYLength - roomY - 1, roomX];
                                    }
                                    realTraceY = realStartY;
                                    ++realTraceX;
                                }
                            }
                            else Debug.LogError("FlipProb DNE Error [MapArray.cs]");

                            realStartX += mapXLength;
                            break;

                        case RoomType.UpDownRoom:
                        break;

                        case RoomType.LeftRightRoom:
                            flipProb = Random.Range(0, 3);

                            if (flipProb == 0)
                            {
                                roomNumber = Random.Range(0, LeftRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = LeftRightRoom[roomNumber, roomY, roomX];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 1)
                            {
                                roomNumber = Random.Range(0, LeftRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = LeftRightRoom[roomNumber, roomY, mapXLength - roomX - 1];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 2)
                            {
                                roomNumber = Random.Range(0, LeftRightRoom.GetLength(0));
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    for (int roomY = 0; roomY < mapYLength; ++roomY)
                                    {
                                        realMap[realTraceY++, realTraceX] = LeftRightRoom[roomNumber, mapYLength - roomY - 1, roomX];
                                    }
                                    realTraceY = realStartY;
                                    ++realTraceX;
                                }
                            }
                            else Debug.LogError("FlipProb DNE Error [MapArray.cs]");

                            realStartX += mapXLength;
                            break;

                        case RoomType.UpDownRightRoom:
                        break;

                        case RoomType.UpDownLeftRoom:
                        break;

                        case RoomType.DownLeftRightRoom:
                            flipProb = Random.Range(0, 3);

                            if (flipProb == 0)
                            {
                                roomNumber = Random.Range(0, DownLeftRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = DownLeftRightRoom[roomNumber, roomY, roomX];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 1)
                            {
                                roomNumber = Random.Range(0, DownLeftRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = DownLeftRightRoom[roomNumber, roomY, mapXLength - roomX - 1];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 2)
                            {
                                roomNumber = Random.Range(0, UpLeftRightRoom.GetLength(0));
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    for (int roomY = 0; roomY < mapYLength; ++roomY)
                                    {
                                        realMap[realTraceY++, realTraceX] = UpLeftRightRoom[roomNumber, mapYLength - roomY - 1, roomX];
                                    }
                                    realTraceY = realStartY;
                                    ++realTraceX;
                                }
                            }
                            else Debug.LogError("FlipProb DNE Error [MapArray.cs]");

                            realStartX += mapXLength;
                            break;

                        case RoomType.UpLeftRightRoom:
                            flipProb = Random.Range(0, 3);

                            if (flipProb == 0)
                            {
                                roomNumber = Random.Range(0, UpLeftRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = UpLeftRightRoom[roomNumber, roomY, roomX];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 1)
                            {
                                roomNumber = Random.Range(0, UpLeftRightRoom.GetLength(0));
                                for (int roomY = 0; roomY < mapYLength; ++roomY)
                                {
                                    for (int roomX = 0; roomX < mapXLength; ++roomX)
                                    {
                                        realMap[realTraceY, realTraceX++] = UpLeftRightRoom[roomNumber, roomY, mapXLength - roomX - 1];
                                    }
                                    realTraceX = realStartX;
                                    ++realTraceY;
                                }
                            }
                            else if (flipProb == 2)
                            {
                                roomNumber = Random.Range(0, DownLeftRightRoom.GetLength(0));
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    for (int roomY = 0; roomY < mapYLength; ++roomY)
                                    {
                                        realMap[realTraceY++, realTraceX] = DownLeftRightRoom[roomNumber, mapYLength - roomY - 1, roomX];
                                    }
                                    realTraceY = realStartY;
                                    ++realTraceX;
                                }
                            }
                            else Debug.LogError("FlipProb DNE Error [MapArray.cs]");

                            realStartX += mapXLength;
                            break;

                        case RoomType.AllSidesRoom:
                            roomNumber = Random.Range(0, AllSidesRoom.GetLength(0));
                            for (int roomY = 0; roomY < mapYLength; ++roomY)
                            {
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    realMap[realTraceY, realTraceX++] = AllSidesRoom[roomNumber, roomY, roomX];
                                }
                                realTraceX = realStartX;
                                ++realTraceY;
                            }
                            realStartX += mapXLength;
                            break;

                        case RoomType.StartRoom:
                            roomNumber = Random.Range(0, StartRoom.GetLength(0));
                            for (int roomY = 0; roomY < mapYLength; ++roomY)
                            {
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    realMap[realTraceY, realTraceX++] = StartRoom[roomNumber, roomY, roomX];
                                }
                                realTraceX = realStartX;
                                ++realTraceY;
                            }
                            realStartX += mapXLength;
                            break;

                        case RoomType.EndRoom:
                            roomNumber = Random.Range(0, EndRoom.GetLength(0));
                            for (int roomY = 0; roomY < mapYLength; ++roomY)
                            {
                                for (int roomX = 0; roomX < mapXLength; ++roomX)
                                {
                                    realMap[realTraceY, realTraceX++] = EndRoom[roomNumber, roomY, roomX];
                                }
                                realTraceX = realStartX;
                                ++realTraceY;
                            }
                            realStartX += mapXLength;
                            break;

                        default:
                            Debug.LogError("RoomType DNE Error");
                            break;
                    }

                    if (realStartX >= mapWidth * mapXLength)
                    {
                        realStartX = 0; realStartY += mapYLength; // �� ���� y�� ���� = 8
                    }
                }
            }

            CheckEnemyGenerationByTile(); // change int[] array instead of using collision detection
            // CheckItemGenerationByTile(); // change int[] array as well
            TilePlacement(realMap);
        }

        private void MakeBaseMap()
        {
            baseMap = new int[mapHeight, mapWidth];
            startX = Random.Range(0, mapWidth);
            startY = 0;
            baseMap[startY, startX] = (int)RoomType.StartRoom;

            int basetraceX = startX; int basetraceY = startY;
            int moveProb;
            do moveProb = Random.Range(0, 16) % 4; while (moveProb == 1 /* || moveProb % 4 == 2 */);
            while (endY != mapHeight - 1)
            {
                switch (moveProb)
                {
                    // Move Left
                    case 0:
                        // Doesn't Get out of Bounds
                        if (basetraceX - 1 >= 0 && baseMap[basetraceY, basetraceX - 1] == (int)RoomType.RandomRoom)
                        {
                            // if (baseMap[basetraceY, basetraceX - 1] != (int)RoomType.RandomRoom)
                            // {
                            //     moveProb = Random.Range(1, 3);
                            //     break;
                            // }

                            baseMap[basetraceY, --basetraceX] = (int)RoomType.LeftRightRoom;

                            // Prob of having room with 3 open sides = 70%
                            bool isThreeSidesOpen = Random.Range(0, 10) < 7;
                            if (isThreeSidesOpen)
                            {
                                switch (Random.Range(0, 2))
                                {
                                    case 0:
                                        baseMap[basetraceY, basetraceX] = (int)RoomType.UpLeftRightRoom;
                                        break;

                                    case 1:
                                        baseMap[basetraceY, basetraceX] = (int)RoomType.DownLeftRightRoom;
                                        break;
                                    
                                    default:
                                        Debug.LogError("Error with LeftRight(Up/Down) Room Generation");
                                        break;
                                }
                            }

                            do moveProb = Random.Range(0, 16); while (moveProb % 4 == 3 || moveProb == 1 || moveProb == 5);
                            moveProb %= 4;
                        }
                        else
                        {
                            if (basetraceX + 1 < mapWidth && baseMap[basetraceY, basetraceX + 1] == (int)RoomType.RandomRoom) moveProb = 3;
                            else moveProb = Random.Range(1, 3);
                        }
                        break;

                    // Move Down
                    case 1:
                        if (baseMap[basetraceY, basetraceX] == (int)RoomType.StartRoom)
                        {
                            do moveProb = Random.Range(0, 4); while (moveProb == 1 || moveProb == 2);
                        }
                        else if (basetraceY + 1 <= mapHeight - 1)
                        {
                            // Determine whether next move is left or right
                            do moveProb = Random.Range(0, 4); while (moveProb == 1 || moveProb == 2);

                            // Check for Room Open-ness
                            if (basetraceX - 1 < 0) // if left is void
                            {
                                baseMap[basetraceY, basetraceX] = (int)RoomType.DownRightRoom;
                                baseMap[++basetraceY, basetraceX] = (int)RoomType.UpRightRoom;
                            }
                            else if (basetraceX + 1 >= mapWidth) // if right is void
                            {
                                baseMap[basetraceY, basetraceX] = (int)RoomType.DownLeftRoom;
                                baseMap[++basetraceY, basetraceX] = (int)RoomType.UpLeftRoom;
                            }
                            else 
                            {
                                // Prob of having room with 3 open sides = 50%
                                bool isThreeSidesOpen = Random.Range(0, 10) < 5;
                                if (isThreeSidesOpen)
                                {
                                    baseMap[basetraceY, basetraceX] = (int)RoomType.DownLeftRightRoom;
                                    baseMap[++basetraceY, basetraceX] = (int)RoomType.UpLeftRightRoom;
                                }
                                else // open only two sides depending on next move
                                {
                                    // Check for Above Room
                                    if (baseMap[basetraceY, basetraceX - 1] != (int)RoomType.RandomRoom) // If Left is NOT a RandomRoom,
                                    {
                                        baseMap[basetraceY, basetraceX] = (int)RoomType.DownLeftRoom;
                                    }
                                    else if (baseMap[basetraceY, basetraceX + 1] != (int)RoomType.RandomRoom) // If Right is NOT a RandomRoom,
                                    {
                                        baseMap[basetraceY, basetraceX] = (int)RoomType.DownRightRoom;
                                    }
                                    else
                                    {
                                        Debug.LogError("Error: Both Sides are NOT void and NOT randomRooms at the same time");
                                    }

                                    // Check for Below Room
                                    if (moveProb == 0) // next move = LEFT
                                    {
                                        baseMap[++basetraceY, basetraceX] = (int)RoomType.UpLeftRoom;
                                    }
                                    else if (moveProb == 3) // next move = RIGHT
                                    {
                                        baseMap[++basetraceY, basetraceX] = (int)RoomType.UpRightRoom;
                                    }
                                    else Debug.LogError("Next Move Error with MapGen");
                                }
                            }
                        }
                        // Reached EndPoint
                        else
                        {
                            endX = basetraceX; endY = basetraceY;
                            baseMap[endY, endX] = (int)RoomType.EndRoom;
                        }
                        break;

                    // Move Up
                    case 2:
                        // CANNOT Move Up
                        // bool canMoveUp = basetraceY > 1 && (basetraceX <= 0 || basetraceX >= mapWidth && 
                        //                     (baseMap[basetraceY - 1, basetraceX - 1] != (int)RoomType.RandomRoom || baseMap[basetraceY - 1, basetraceX + 1] != (int)RoomType.RandomRoom));
                        // if (!canMoveUp) 
                        // {
                        //     do moveProb = Random.Range(0, 4); while (moveProb == 2);
                        // }

                        // else if (baseMap[basetraceY - 1, basetraceX] == (int)RoomType.RandomRoom)
                        // {
                        //     // Determine whether next move is left or right
                        //     do moveProb = Random.Range(0, 4); while (moveProb == 1 || moveProb == 2);

                        //     // Check for Room Open-ness
                        //     // if (basetraceX - 1 < 0) // if left is void
                        //     // {
                        //     //     baseMap[basetraceY, basetraceX] = (int)RoomType.UpRightRoom;
                        //     //     baseMap[--basetraceY, basetraceX] = (int)RoomType.DownRightRoom;
                        //     // }
                        //     // else if (basetraceX + 1 >= mapWidth) // if right is void
                        //     // {
                        //     //     baseMap[basetraceY, basetraceX] = (int)RoomType.UpLeftRoom;
                        //     //     baseMap[--basetraceY, basetraceX] = (int)RoomType.DownLeftRoom;
                        //     // }
                        //     // else 
                        //     // {
                        //     // Prob of having room with 3 open sides = 40%
                        //     bool isThreeSidesOpen = Random.Range(0, 10) < 4;
                        //     if (isThreeSidesOpen)
                        //     {
                        //         baseMap[basetraceY, basetraceX] = (int)RoomType.UpLeftRightRoom;
                        //         baseMap[--basetraceY, basetraceX] = (int)RoomType.DownLeftRightRoom;
                        //     }
                        //     else // open only two sides depending on next move
                        //     {
                        //         // Check for Below Room
                        //         if (baseMap[basetraceY, basetraceX - 1] != (int)RoomType.RandomRoom) // If Left is NOT a RandomRoom,
                        //         {
                        //             baseMap[basetraceY, basetraceX] = (int)RoomType.UpLeftRoom;
                        //         }
                        //         else if (baseMap[basetraceY, basetraceX + 1] != (int)RoomType.RandomRoom) // If Right is NOT a RandomRoom,
                        //         {
                        //             baseMap[basetraceY, basetraceX] = (int)RoomType.UpRightRoom;
                        //         }
                        //         else
                        //         {
                        //             Debug.LogError("Error: Both Sides are NOT void and NOT randomRooms at the same time");
                        //         }

                        //         // Check for Above Room
                        //         if (moveProb == 0) // next move = LEFT
                        //         {
                        //             baseMap[--basetraceY, basetraceX] = (int)RoomType.DownLeftRoom;
                        //         }
                        //         else if (moveProb == 3) // next move = RIGHT
                        //         {
                        //             baseMap[--basetraceY, basetraceX] = (int)RoomType.DownRightRoom;
                        //         }
                        //         else Debug.LogError("Next Move Error with MapGen");
                        //     }
                        //     // }
                        // }
                        // break;

                    // Move Right
                    case 3:
                        // Doesn't Get out of Bounds
                        if (basetraceX + 1 < mapWidth && baseMap[basetraceY, basetraceX + 1] == (int)RoomType.RandomRoom)
                        {
                            // if (baseMap[basetraceY, basetraceX + 1] != (int)RoomType.RandomRoom)
                            // {
                            //     moveProb = Random.Range(0, 2);
                            //     break;
                            // }

                            baseMap[basetraceY, ++basetraceX] = (int)RoomType.LeftRightRoom;

                            // Prob of having room with 3 open sides = 70%
                            bool isThreeSidesOpen = Random.Range(0, 10) < 7;
                            if (isThreeSidesOpen)
                            {
                                switch (Random.Range(0, 2))
                                {
                                    case 0:
                                        baseMap[basetraceY, basetraceX] = (int)RoomType.UpLeftRightRoom;
                                        break;

                                    case 1:
                                        baseMap[basetraceY, basetraceX] = (int)RoomType.DownLeftRightRoom;
                                        break;
                                    
                                    default:
                                        Debug.LogError("Error with LeftRight(Up/Down) Room Generation");
                                        break;
                                }
                            }

                            do moveProb = Random.Range(0, 16); while (moveProb % 4 == 0 || moveProb == 1 || moveProb == 5);
                            moveProb %= 4;
                        }
                        else
                        {
                            if (basetraceX - 1 >= 0 && baseMap[basetraceY, basetraceX - 1] == (int)RoomType.RandomRoom) moveProb = 0;
                            else moveProb = Random.Range(1, 3);
                        }
                        break;

                    default:
                        Debug.LogError("Error with Map 2DArray Generation");
                        break;
                }
            }

            TestBaseMapGeneration();
        }

        private void TilePlacement(int[,] realMap)
        {
            for (int y = 0; y < realMap.GetLength(0); ++y)
            {
                for (int x = 0; x < realMap.GetLength(1); ++x)
                {
                    switch ((TileType)realMap[y, x])
                    {
                        case TileType.Blank:
                            tileTraceX += 2;
                            break;

                        case TileType.Block:
                            Instantiate(dwellingTile, new Vector3(tileTraceX, tileTraceY), Quaternion.identity);
                            tileTraceX += 2;
                            break;

                        case TileType.ElectricStingRay:
                            Instantiate(ElectricStingRay, new Vector3(tileTraceX, tileTraceY), Quaternion.identity);
                            tileTraceX += 2;
                            break;

                        case TileType.HypnoCuttleFish:
                            Instantiate(HypnoCuttleFish, new Vector3(tileTraceX, tileTraceY), Quaternion.identity);
                            tileTraceX += 2;
                            break;

                        case TileType.AngryShell:
                            Instantiate(AngryShell, new Vector3(tileTraceX, tileTraceY), Quaternion.identity);
                            tileTraceX += 2;
                            break;
                        
                        case TileType.ThrowingCrab:
                            Instantiate(ThrowingCrab, new Vector3(tileTraceX, tileTraceY), Quaternion.identity);
                            tileTraceX += 2;
                            break;
                        
                        case TileType.HealthPotion:
                            Instantiate(HealthPotion, new Vector3(tileTraceX, tileTraceY), Quaternion.identity);
                            tileTraceX += 2;
                            break;

                        case TileType.BubbleShield:
                            Instantiate(BubbleShield, new Vector3(tileTraceX, tileTraceY), Quaternion.identity);
                            tileTraceX += 2;
                            break;

                        case TileType.PowerBattery:
                            Instantiate(PowerBattery, new Vector3(tileTraceX, tileTraceY), Quaternion.identity);
                            tileTraceX += 2;
                            break;

                        case TileType.StartPosition:
                            EventManager.TriggerEvent(EventType.PlayerToStartPosition, new Dictionary<string, object>{{"StartPosition", new Vector3(tileTraceX, tileTraceY)}});
                            tileTraceX += 2;
                            break;

                        default:
                            Debug.LogError("Tile Type DNE Error");
                            break;
                    }
                }
                tileTraceX = startTileX; tileTraceY -= 2;
            }
        }

        private void CheckItemGenerationByTile()
        {
            for (int y = 1; y < realMap.GetLength(0) - 1; ++y)
            {
                for (int x = 1; x < realMap.GetLength(1) - 1; ++x)
                {
                    // HealthPotion
                    if (!isObjectInArea(y, x, 7, 7, TileType.HealthPotion))
                    {
                        // Summon Probability = 50%
                        bool isInstantiate = Random.Range(0, 100) < 50;
                        if (isInstantiate)
                        {
                            realMap[y, x] = (int)TileType.HealthPotion;
                            continue;
                        }
                    }

                    // PowerBattery
                    if (!isObjectInArea(y, x, 7, 7, TileType.PowerBattery))
                    {
                        // Summon Probability = 50%
                        bool isInstantiate = Random.Range(0, 100) < 50;
                        if (isInstantiate)
                        {
                            realMap[y, x] = (int)TileType.PowerBattery;
                            continue;
                        }
                    }

                    // BubbleShield
                    if (!isObjectInArea(y, x, 7, 7, TileType.BubbleShield))
                    {
                        // Summon Probability = 50%
                        bool isInstantiate = Random.Range(0, 100) < 50;
                        if (isInstantiate)
                        {
                            realMap[y, x] = (int)TileType.BubbleShield;
                            continue;
                        }
                    }

                }
            }
        }

        private void CheckEnemyGenerationByTile()
        {
            for (int y = 1; y < realMap.GetLength(0) - 1; ++y)
            {
                for (int x = 1; x < realMap.GetLength(1) - 1; ++x)
                {
                    // AngryShell
                    if (y >= realMap.GetLength(0)/2 && CheckArea(y + 1, x, 0, 5, TileType.Block) && CheckArea(y - 2, x, 6, 5, TileType.Blank) && !isObjectInArea(y, x, 0, 7, TileType.AngryShell))
                    {
                        // Summon Probability = 33%
                        bool isInstantiate = Random.Range(0, 100) < 33;
                        if (isInstantiate)
                        {
                            realMap[y, x] = (int)TileType.AngryShell;
                            continue;
                        }
                    }

                    // Electric StingRay
                    if (y >= 2*realMap.GetLength(0)/3 && CheckArea(y, x, 6, 6, TileType.Blank) && !isObjectInArea(y, x, 14, 14, TileType.ElectricStingRay))
                    {
                        // Summon Probability = 50%
                        bool isInstantiate = Random.Range(0, 100) < 18;
                        if (isInstantiate)
                        {
                            realMap[y, x] = (int)TileType.ElectricStingRay;
                            continue;
                        }
                    }

                    // Hypno-CuttleFish
                    if (y >= realMap.GetLength(0)/2 && CheckArea(y, x, 8, 8, TileType.Blank) && !isObjectInArea(y, x, 12, 12, TileType.HypnoCuttleFish))
                    {
                        // Summon Probability = 50%
                        bool isInstantiate = Random.Range(0, 100) < 50;
                        if (isInstantiate)
                        {
                            realMap[y, x] = (int)TileType.HypnoCuttleFish;
                            continue;
                        }
                    }

                    // Throwing Crab                - 빈 공간 체크                               - 바닥 체크                               - 꽃게 최소 간격 체크
                    if (CheckArea(y - 2, x, 5, 5, TileType.Blank) && CheckArea(y + 1, x, 0, 5, TileType.Block) && !isObjectInArea(y, x, 0, 14, TileType.ThrowingCrab) && !isObjectInArea(y, x, 0, 10, TileType.AngryShell))
                    {
                        // Summon Probability = 50%
                        bool isInstantiate = Random.Range(0, 100) < 50;
                        if (isInstantiate)
                        {
                            realMap[y, x] = (int)TileType.ThrowingCrab;
                            continue;
                        }
                    }

                }
            }
        }

        private bool isObjectInArea(int EnemyY, int EnemyX, int RangeY, int RangeX, TileType tileType)
        {
            // IndexOutOfRangeException
            if (EnemyY - RangeY/2 < 0 || EnemyY + RangeY/2 >= mapYLength * mapHeight
                || EnemyX - RangeX/2 < 0 || EnemyX + RangeX/2 >= mapXLength * mapWidth)
            {
                return false;
            }

            bool isRangeYEven = RangeY % 2 == 0; bool isRangeXEven = RangeX % 2 == 0;
            if (RangeY == 0)
            {
                if (isRangeXEven)
                {
                    for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2; ++x)
                    {
                        if (realMap[EnemyY, x] == (int)tileType) return true;
                        else continue;
                    }
                }
                else // CheckArea(y, x, 0, 5, TileType.Block))
                {
                    for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2 + 1; ++x)
                    {
                        if (realMap[EnemyY, x] == (int)tileType) return true;
                        else continue;
                    }
                }
            }
            else if (RangeX == 0)
            {
                if (isRangeYEven)
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2; ++y)
                    {
                        if (realMap[y, EnemyX] == (int)tileType) return true;
                        else continue;
                    }
                }
                else
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2 + 1; ++y)
                    {
                        if (realMap[y, EnemyX] == (int)tileType) return true;
                        else continue;
                    }
                }
            }
            else
            {
                if (isRangeYEven && isRangeXEven)
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2; ++y)
                    {
                        for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2; ++x)
                        {
                            if (realMap[y, x] == (int)tileType) return true;
                            else continue;
                        }
                    }
                }
                else if (isRangeYEven)
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2; ++y)
                    {
                        for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2 + 1; ++x)
                        {
                            if (realMap[y, x] == (int)tileType) return true;
                            else continue;
                        }
                    }
                }
                else if (isRangeXEven)
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2 + 1; ++y)
                    {
                        for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2; ++x)
                        {
                            if (realMap[y, x] == (int)tileType) return true;
                            else continue;
                        }
                    }
                }
                else // both ranges are odd
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2 + 1; ++y)
                    {
                        for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2 + 1; ++x)
                        {
                            if (realMap[y, x] == (int)tileType) return true;
                            else continue;
                        }
                    }
                }
            }

            return false; // area is all blank!
        }

        // If Range is Even ==> Above is 1 more than Below is (ex: 6 tiles --> 3 tiles above, 2 tiles below)
        private bool CheckArea(int EnemyY, int EnemyX, int RangeY, int RangeX, TileType tileType)
        {
            // IndexOutOfRangeException
            if (EnemyY - RangeY/2 < 0 || EnemyY + RangeY/2 >= mapYLength * mapHeight
                || EnemyX - RangeX/2 < 0 || EnemyX + RangeX/2 >= mapXLength * mapWidth)
            {
                return false;
            }

            bool isRangeYEven = RangeY % 2 == 0; bool isRangeXEven = RangeX % 2 == 0;
            if (RangeY == 0)
            {
                if (isRangeXEven)
                {
                    for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2; ++x)
                    {
                        if (realMap[EnemyY, x] != (int)tileType) return false;
                        else continue;
                    }
                }
                else // CheckArea(y, x, 0, 5, TileType.Block))
                {
                    for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2 + 1; ++x)
                    {
                        if (realMap[EnemyY, x] != (int)tileType) return false;
                        else continue;
                    }
                }
            }
            else if (RangeX == 0)
            {
                if (isRangeYEven)
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2; ++y)
                    {
                        if (realMap[y, EnemyX] != (int)tileType) return false;
                        else continue;
                    }
                }
                else
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2 + 1; ++y)
                    {
                        if (realMap[y, EnemyX] != (int)tileType) return false;
                        else continue;
                    }
                }
            }
            else
            {
                if (isRangeYEven && isRangeXEven)
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2; ++y)
                    {
                        for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2; ++x)
                        {
                            if (realMap[y, x] != (int)tileType) return false;
                            else continue;
                        }
                    }
                }
                else if (isRangeYEven)
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2; ++y)
                    {
                        for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2 + 1; ++x)
                        {
                            if (realMap[y, x] != (int)tileType) return false;
                            else continue;
                        }
                    }
                }
                else if (isRangeXEven)
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2 + 1; ++y)
                    {
                        for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2; ++x)
                        {
                            if (realMap[y, x] != (int)tileType) return false;
                            else continue;
                        }
                    }
                }
                else // both ranges are odd
                {
                    for (int y = EnemyY - RangeY/2; y < EnemyY + RangeY/2 + 1; ++y)
                    {
                        for (int x = EnemyX - RangeX/2; x < EnemyX + RangeX/2 + 1; ++x)
                        {
                            if (realMap[y, x] != (int)tileType) return false;
                            else continue;
                        }
                    }
                }
            }

            return true; // area is all blank!
        }

        private void TestBaseMapGeneration()
        {
            string row = null;
            for (int i = 0; i < baseMap.GetLength(0); ++i)
            {
                for (int j = 0; j < baseMap.GetLength(1); ++j)
                {
                    row += baseMap[i, j].ToString() + " ";
                }
                row = null;
            }
        }

        // private int[,,] FlipRoom(int[,,] arrayToBeFlipped, int roomIndex)
        // {
        //     int[,,] returnArray = new int[0, mapYLength, mapXLength];
        //     for (int y = 0; y < arrayToBeFlipped.GetLength(0); ++y)
        //     {
        //         for (int x = 0; x < arrayToBeFlipped.GetLength(1) / 2; ++x)
        //         {
        //             int temp = arrayToBeFlipped[roomIndex, y, x];
        //             returnArray[0, y, arrayToBeFlipped.GetLength(1) - x] = temp;
        //             returnArray[0, y, x] = arrayToBeFlipped[roomIndex, y, arrayToBeFlipped.GetLength(1) - x];
        //         }
        //     }
        //     return returnArray;
        // }
    }
}